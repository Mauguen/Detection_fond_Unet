These codes were created to insure accurate bottom detection on split-beam EK80 and EK60 echosounder echograms. 
To do so, we used a convolutional neural network with a U-Net architecture. .

The aim of each of the scripts hereby provided is listed bellow :
- echograms.py : creation of the Echogram class that charges the data for training, validation and testing purposes.
- loss.py : loss function used for training and validation
- metric.py : functions that calculate the IOU and pixel accuracy during validation phases
- unet.py : contains the Unet class of the model architecture
- train.py : training script. It calls all of the previous scripts to proceed with the training with parameters are defined in the parse_args() function
- inference.py : script that is used to test the trained neural network both on both single samples and on a lot of samples

The last two codes are the ones that you need to launch to create, train and test your own CNN U-Net. 
Before lunching them, insure that you have modified the args.rootdir in the main of the code to put the directory in which you put the codes. 
Moreover, modify the root_dir in functions get_trainloader (train.py), get_validationloader (train.py) and get_testloader (inference.py). 
(line : data = Echograms(data_type='validate', root_dir='D:/PFE/Codes_finaux/data/'))

The data furnished is a sample of 200kHz echograms collected during the SCOPES (https://doi.org/10.17600/18000662), FAROFA3 (https://doi.org/10.17882/71024)
and PIRATA (https://doi.org/10.17882/71379) cruises performed by the IRD.

 
